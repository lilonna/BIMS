// <auto-generated />
using System;
using BIMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BIMS.Migrations
{
    [DbContext(typeof(BIMSContext))]
    [Migration("20250218071912_AddMessageAndIsReadToNotification")]
    partial class AddMessageAndIsReadToNotification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BIMS.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConstractionYear")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfFloor")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("OwnershipTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Table_1");

                    b.HasIndex("BuildingTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("OwnershipTypeId");

                    b.HasIndex("UseTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("BIMS.Models.BuildingEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("BuildingEmployees");
                });

            modelBuilder.Entity("BIMS.Models.BuildingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BuildingTypes");
                });

            modelBuilder.Entity("BIMS.Models.BusinessArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BusinessAreas");
                });

            modelBuilder.Entity("BIMS.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BIMS.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatStatusId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatStatusId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("BIMS.Models.ChatStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ChatStatuses");
                });

            modelBuilder.Entity("BIMS.Models.ChatVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OldMessage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatVersions");
                });

            modelBuilder.Entity("BIMS.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BIMS.Models.Documente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Documentes");
                });

            modelBuilder.Entity("BIMS.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumberOfRoom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("BIMS.Models.FloorPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AppliedDate")
                        .HasColumnType("date");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("FloorPrices");
                });

            modelBuilder.Entity("BIMS.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("BIMS.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("BIMS.Models.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatuses");
                });

            modelBuilder.Entity("BIMS.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex(new[] { "ShopId" }, "IX_Items_ShopId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("BIMS.Models.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("BIMS.Models.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemImages");
                });

            modelBuilder.Entity("BIMS.Models.ItemPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AppliedDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<double>("MaxPrice")
                        .HasColumnType("float");

                    b.Property<double>("MinPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemPrices");
                });

            modelBuilder.Entity("BIMS.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Coordinates")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingEmployeeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateSubmitted")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaintenanceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingEmployeeId");

                    b.HasIndex("MaintenanceStatusId");

                    b.HasIndex("MaintenanceTypeId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("MaintenanceRequests");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceStatuses");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceTypes");
                });

            modelBuilder.Entity("BIMS.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("TempColumn")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationStatusId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BIMS.Models.NotificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("NotificationStatuses");
                });

            modelBuilder.Entity("BIMS.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("BIMS.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BIMS.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BIMS.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OwnershipTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RegisteredDate")
                        .HasColumnType("date");

                    b.Property<int>("Tin")
                        .HasColumnType("int")
                        .HasColumnName("TIN");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("OwnershipTypeId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("BIMS.Models.OwnershipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OwnershipTypes");
                });

            modelBuilder.Entity("BIMS.Models.PaymentMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PaymentModes");
                });

            modelBuilder.Entity("BIMS.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("BIMS.Models.RentalAgreementTermination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoomRentalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RoomRentalId");

                    b.ToTable("RentalAgreementTerminations");
                });

            modelBuilder.Entity("BIMS.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoomStatusId")
                        .HasColumnType("int");

                    b.Property<int>("SizeInm2")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("RoomStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("BIMS.Models.RoomPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AppliedDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("PricePerM2")
                        .HasColumnType("float");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomPrices");
                });

            modelBuilder.Entity("BIMS.Models.RoomProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("RoomPropertyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomPropertyTypeId");

                    b.ToTable("RoomProperties");
                });

            modelBuilder.Entity("BIMS.Models.RoomPropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RoomPropertyTypes");
                });

            modelBuilder.Entity("BIMS.Models.RoomPropertyTypeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoomPropertyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomPropertyTypeId");

                    b.ToTable("RoomPropertyTypeOptions");
                });

            modelBuilder.Entity("BIMS.Models.RoomRental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessAreaId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BusinessAreaId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TenantId");

                    b.ToTable("RoomRentals");
                });

            modelBuilder.Entity("BIMS.Models.RoomRentalPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("PaidDate")
                        .HasColumnType("date");

                    b.Property<int>("PaymentModeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RoomRentalId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PaymentModeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("RoomRentalId");

                    b.ToTable("RoomRentalPayments");
                });

            modelBuilder.Entity("BIMS.Models.RoomStatue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RoomStatues");
                });

            modelBuilder.Entity("BIMS.Models.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("BIMS.Models.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessAreaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessAreaId");

                    b.HasIndex("UserId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("BIMS.Models.ShopLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopLocations");
                });

            modelBuilder.Entity("BIMS.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TenantTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantTypeId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("BIMS.Models.TenantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TenantTypes");
                });

            modelBuilder.Entity("BIMS.Models.UseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UseTypes");
                });

            modelBuilder.Entity("BIMS.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("IdentityUserLogin<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserToken<string>");
                });

            modelBuilder.Entity("BIMS.Models.Building", b =>
                {
                    b.HasOne("BIMS.Models.BuildingType", "BuildingType")
                        .WithMany("Buildings")
                        .HasForeignKey("BuildingTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_BuildingTypes");

                    b.HasOne("BIMS.Models.City", "City")
                        .WithMany("Buildings")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_Cities");

                    b.HasOne("BIMS.Models.Location", "Location")
                        .WithMany("Buildings")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_Locations");

                    b.HasOne("BIMS.Models.Owner", "Owner")
                        .WithMany("Buildings")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_Owners");

                    b.HasOne("BIMS.Models.OwnershipType", "OwnershipType")
                        .WithMany("Buildings")
                        .HasForeignKey("OwnershipTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_OwnershipTypes");

                    b.HasOne("BIMS.Models.UseType", "UseType")
                        .WithMany("Buildings")
                        .HasForeignKey("UseTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_UseTypes");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("Buildings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_Users");

                    b.Navigation("BuildingType");

                    b.Navigation("City");

                    b.Navigation("Location");

                    b.Navigation("Owner");

                    b.Navigation("OwnershipType");

                    b.Navigation("UseType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.BuildingEmployee", b =>
                {
                    b.HasOne("BIMS.Models.Building", "Building")
                        .WithMany("BuildingEmployees")
                        .HasForeignKey("BuildingId")
                        .IsRequired()
                        .HasConstraintName("FK_BuildingEmployees_Buildings");

                    b.HasOne("BIMS.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("BuildingEmployees")
                        .HasForeignKey("ServiceCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_BuildingEmployees_ServiceCategories");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("BuildingEmployees")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_BuildingEmployees_Users");

                    b.Navigation("Building");

                    b.Navigation("ServiceCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.Cart", b =>
                {
                    b.HasOne("BIMS.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.Chat", b =>
                {
                    b.HasOne("BIMS.Models.ChatStatus", "ChatStatus")
                        .WithMany("Chats")
                        .HasForeignKey("ChatStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Chats_ChatStatuses");

                    b.HasOne("BIMS.Models.Chat", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Chats_Chats");

                    b.HasOne("BIMS.Models.User", "Receiver")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK_Chats_Users1");

                    b.HasOne("BIMS.Models.User", "Sender")
                        .WithMany("ChatSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Chats_Users");

                    b.Navigation("ChatStatus");

                    b.Navigation("Parent");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BIMS.Models.ChatVersion", b =>
                {
                    b.HasOne("BIMS.Models.Chat", "Chat")
                        .WithMany("ChatVersions")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("FK_ChatVersions_Chats");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("BIMS.Models.Floor", b =>
                {
                    b.HasOne("BIMS.Models.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .IsRequired()
                        .HasConstraintName("FK_Floors_Buildings");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("BIMS.Models.FloorPrice", b =>
                {
                    b.HasOne("BIMS.Models.Floor", "Floor")
                        .WithMany("FloorPrices")
                        .HasForeignKey("FloorId")
                        .IsRequired()
                        .HasConstraintName("FK_FloorPrices_Floors");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("BIMS.Models.Invoice", b =>
                {
                    b.HasOne("BIMS.Models.InvoiceStatus", "InvoiceStatus")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_InvoiceStatuses");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_Users");

                    b.Navigation("InvoiceStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.Item", b =>
                {
                    b.HasOne("BIMS.Models.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Items_ItemCategories");

                    b.HasOne("BIMS.Models.Shop", null)
                        .WithMany("Items")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("BIMS.Models.ItemImage", b =>
                {
                    b.HasOne("BIMS.Models.Item", "Item")
                        .WithMany("ItemImages")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ItemImages_Items");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("BIMS.Models.ItemPrice", b =>
                {
                    b.HasOne("BIMS.Models.Item", "Item")
                        .WithMany("ItemPrices")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ItemPrices_Items");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("BIMS.Models.Location", b =>
                {
                    b.HasOne("BIMS.Models.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Locations_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceRequest", b =>
                {
                    b.HasOne("BIMS.Models.BuildingEmployee", "BuildingEmployee")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("BuildingEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceRequests_BuildingEmployees");

                    b.HasOne("BIMS.Models.MaintenanceStatus", "MaintenanceStatus")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("MaintenanceStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceRequests_MaintenanceStatuses");

                    b.HasOne("BIMS.Models.MaintenanceType", "MaintenanceType")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("MaintenanceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceRequests_MaintenanceTypes");

                    b.HasOne("BIMS.Models.Room", "Room")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceRequests_Rooms");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceRequests_Users");

                    b.Navigation("BuildingEmployee");

                    b.Navigation("MaintenanceStatus");

                    b.Navigation("MaintenanceType");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.Notification", b =>
                {
                    b.HasOne("BIMS.Models.NotificationStatus", "NotificationStatus")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_NotificationStatuses");

                    b.HasOne("BIMS.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_NotificationTypes");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_Users");

                    b.Navigation("NotificationStatus");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.Order", b =>
                {
                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.OrderItem", b =>
                {
                    b.HasOne("BIMS.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BIMS.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BIMS.Models.Owner", b =>
                {
                    b.HasOne("BIMS.Models.Documente", "Document")
                        .WithMany("Owners")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_Owners_Documentes");

                    b.HasOne("BIMS.Models.OwnershipType", "OwnershipType")
                        .WithMany("Owners")
                        .HasForeignKey("OwnershipTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Owners_OwnershipTypes");

                    b.Navigation("Document");

                    b.Navigation("OwnershipType");
                });

            modelBuilder.Entity("BIMS.Models.RentalAgreementTermination", b =>
                {
                    b.HasOne("BIMS.Models.Documente", "Document")
                        .WithMany("RentalAgreementTerminations")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_RentalAgreementTerminations_Documentes");

                    b.HasOne("BIMS.Models.RoomRental", "RoomRental")
                        .WithMany("RentalAgreementTerminations")
                        .HasForeignKey("RoomRentalId")
                        .IsRequired()
                        .HasConstraintName("FK_RentalAgreementTerminations_RoomRentals");

                    b.Navigation("Document");

                    b.Navigation("RoomRental");
                });

            modelBuilder.Entity("BIMS.Models.Room", b =>
                {
                    b.HasOne("BIMS.Models.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_Floors");

                    b.HasOne("BIMS.Models.RoomStatue", "RoomStatus")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_RoomStatues");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("Rooms")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_Users");

                    b.Navigation("Floor");

                    b.Navigation("RoomStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.RoomPrice", b =>
                {
                    b.HasOne("BIMS.Models.Room", "Room")
                        .WithMany("RoomPrices")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomPrices_Rooms");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BIMS.Models.RoomProperty", b =>
                {
                    b.HasOne("BIMS.Models.Room", "Room")
                        .WithMany("RoomProperties")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomProperties_Rooms");

                    b.HasOne("BIMS.Models.RoomPropertyType", "RoomPropertyType")
                        .WithMany("RoomProperties")
                        .HasForeignKey("RoomPropertyTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomProperties_RoomPropertyTypes");

                    b.Navigation("Room");

                    b.Navigation("RoomPropertyType");
                });

            modelBuilder.Entity("BIMS.Models.RoomPropertyTypeOption", b =>
                {
                    b.HasOne("BIMS.Models.RoomPropertyType", "RoomPropertyType")
                        .WithMany("RoomPropertyTypeOptions")
                        .HasForeignKey("RoomPropertyTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomPropertyTypeOptions_RoomPropertyTypes");

                    b.Navigation("RoomPropertyType");
                });

            modelBuilder.Entity("BIMS.Models.RoomRental", b =>
                {
                    b.HasOne("BIMS.Models.BusinessArea", "BusinessArea")
                        .WithMany("RoomRentals")
                        .HasForeignKey("BusinessAreaId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentals_BusinessAreas");

                    b.HasOne("BIMS.Models.Documente", "Document")
                        .WithMany("RoomRentals")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_RoomRentals_Documentes");

                    b.HasOne("BIMS.Models.Room", "Room")
                        .WithMany("RoomRentals")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentals_Rooms");

                    b.HasOne("BIMS.Models.Tenant", "Tenant")
                        .WithMany("RoomRentals")
                        .HasForeignKey("TenantId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentals_Tenants");

                    b.Navigation("BusinessArea");

                    b.Navigation("Document");

                    b.Navigation("Room");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BIMS.Models.RoomRentalPayment", b =>
                {
                    b.HasOne("BIMS.Models.PaymentMode", "PaymentMode")
                        .WithMany("RoomRentalPayments")
                        .HasForeignKey("PaymentModeId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentalPayments_PaymentModes");

                    b.HasOne("BIMS.Models.PaymentType", "PaymentType")
                        .WithMany("RoomRentalPayments")
                        .HasForeignKey("PaymentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentalPayments_PaymentTypes");

                    b.HasOne("BIMS.Models.RoomRental", "RoomRental")
                        .WithMany("RoomRentalPayments")
                        .HasForeignKey("RoomRentalId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentalPayments_RoomRentals");

                    b.Navigation("PaymentMode");

                    b.Navigation("PaymentType");

                    b.Navigation("RoomRental");
                });

            modelBuilder.Entity("BIMS.Models.Shop", b =>
                {
                    b.HasOne("BIMS.Models.BusinessArea", "BusinessArea")
                        .WithMany("Shops")
                        .HasForeignKey("BusinessAreaId")
                        .IsRequired()
                        .HasConstraintName("FK_Shops_BusinessAreas");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("Shops")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Shops_Users");

                    b.Navigation("BusinessArea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.ShopLocation", b =>
                {
                    b.HasOne("BIMS.Models.Room", "Room")
                        .WithMany("ShopLocations")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_ShopLocations_Rooms");

                    b.HasOne("BIMS.Models.Shop", "Shop")
                        .WithMany("ShopLocations")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("FK_ShopLocations_Shops");

                    b.Navigation("Room");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BIMS.Models.Tenant", b =>
                {
                    b.HasOne("BIMS.Models.TenantType", "TenantType")
                        .WithMany("Tenants")
                        .HasForeignKey("TenantTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Tenants_TenantTypes");

                    b.Navigation("TenantType");
                });

            modelBuilder.Entity("BIMS.Models.User", b =>
                {
                    b.HasOne("BIMS.Models.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Genders");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BIMS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BIMS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BIMS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BIMS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BIMS.Models.Building", b =>
                {
                    b.Navigation("BuildingEmployees");

                    b.Navigation("Floors");
                });

            modelBuilder.Entity("BIMS.Models.BuildingEmployee", b =>
                {
                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("BIMS.Models.BuildingType", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("BIMS.Models.BusinessArea", b =>
                {
                    b.Navigation("RoomRentals");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("BIMS.Models.Chat", b =>
                {
                    b.Navigation("ChatVersions");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("BIMS.Models.ChatStatus", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("BIMS.Models.City", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("BIMS.Models.Documente", b =>
                {
                    b.Navigation("Owners");

                    b.Navigation("RentalAgreementTerminations");

                    b.Navigation("RoomRentals");
                });

            modelBuilder.Entity("BIMS.Models.Floor", b =>
                {
                    b.Navigation("FloorPrices");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BIMS.Models.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BIMS.Models.InvoiceStatus", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("BIMS.Models.Item", b =>
                {
                    b.Navigation("ItemImages");

                    b.Navigation("ItemPrices");
                });

            modelBuilder.Entity("BIMS.Models.ItemCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BIMS.Models.Location", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceStatus", b =>
                {
                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceType", b =>
                {
                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("BIMS.Models.NotificationStatus", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("BIMS.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("BIMS.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BIMS.Models.Owner", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("BIMS.Models.OwnershipType", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Owners");
                });

            modelBuilder.Entity("BIMS.Models.PaymentMode", b =>
                {
                    b.Navigation("RoomRentalPayments");
                });

            modelBuilder.Entity("BIMS.Models.PaymentType", b =>
                {
                    b.Navigation("RoomRentalPayments");
                });

            modelBuilder.Entity("BIMS.Models.Room", b =>
                {
                    b.Navigation("MaintenanceRequests");

                    b.Navigation("RoomPrices");

                    b.Navigation("RoomProperties");

                    b.Navigation("RoomRentals");

                    b.Navigation("ShopLocations");
                });

            modelBuilder.Entity("BIMS.Models.RoomPropertyType", b =>
                {
                    b.Navigation("RoomProperties");

                    b.Navigation("RoomPropertyTypeOptions");
                });

            modelBuilder.Entity("BIMS.Models.RoomRental", b =>
                {
                    b.Navigation("RentalAgreementTerminations");

                    b.Navigation("RoomRentalPayments");
                });

            modelBuilder.Entity("BIMS.Models.RoomStatue", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BIMS.Models.ServiceCategory", b =>
                {
                    b.Navigation("BuildingEmployees");
                });

            modelBuilder.Entity("BIMS.Models.Shop", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("ShopLocations");
                });

            modelBuilder.Entity("BIMS.Models.Tenant", b =>
                {
                    b.Navigation("RoomRentals");
                });

            modelBuilder.Entity("BIMS.Models.TenantType", b =>
                {
                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("BIMS.Models.UseType", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("BIMS.Models.User", b =>
                {
                    b.Navigation("BuildingEmployees");

                    b.Navigation("Buildings");

                    b.Navigation("ChatReceivers");

                    b.Navigation("ChatSenders");

                    b.Navigation("Invoices");

                    b.Navigation("MaintenanceRequests");

                    b.Navigation("Notifications");

                    b.Navigation("Rooms");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
