// <auto-generated />
using System;
using BIMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BIMS.Migrations
{
    [DbContext(typeof(BIMSContext))]
    [Migration("20250616084723_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BIMS.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("buildingtypeid");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("cityid");

                    b.Property<string>("ConstractionYear")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("constractionyear");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer")
                        .HasColumnName("locationid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfFloor")
                        .HasColumnType("integer")
                        .HasColumnName("numberoffloor");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("ownerid");

                    b.Property<int>("OwnershipTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("ownershiptypeid");

                    b.Property<int>("UseTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("usetypeid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("PK_Table_1");

                    b.HasIndex("BuildingTypeId")
                        .HasDatabaseName("ix_buildings_buildingtypeid");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_buildings_cityid");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_buildings_locationid");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_buildings_ownerid");

                    b.HasIndex("OwnershipTypeId")
                        .HasDatabaseName("ix_buildings_ownershiptypeid");

                    b.HasIndex("UseTypeId")
                        .HasDatabaseName("ix_buildings_usetypeid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_buildings_userid");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("BIMS.Models.BuildingEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer")
                        .HasColumnName("buildingid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phonenumber");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("servicecategoryid");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_buildingemployees");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_buildingemployees_buildingid");

                    b.HasIndex("ServiceCategoryId")
                        .HasDatabaseName("ix_buildingemployees_servicecategoryid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_buildingemployees_userid");

                    b.ToTable("buildingemployees");
                });

            modelBuilder.Entity("BIMS.Models.BuildingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_buildingtypes");

                    b.ToTable("buildingtypes");
                });

            modelBuilder.Entity("BIMS.Models.BusinessArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_businessareas");

                    b.ToTable("businessareas");
                });

            modelBuilder.Entity("BIMS.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("itemid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("totalprice");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_carts_itemid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_carts_userid");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("BIMS.Models.ChapaWebhookResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .HasColumnType("text")
                        .HasColumnName("amount");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TxRef")
                        .HasColumnType("text")
                        .HasColumnName("txref");

                    b.HasKey("Id")
                        .HasName("pk_chapawebhookresponses");

                    b.ToTable("chapawebhookresponses");
                });

            modelBuilder.Entity("BIMS.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("chatstatusid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("message");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer")
                        .HasColumnName("receiverid");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("senderid");

                    b.HasKey("Id")
                        .HasName("pk_chats");

                    b.HasIndex("ChatStatusId")
                        .HasDatabaseName("ix_chats_chatstatusid");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_chats_parentid");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("ix_chats_receiverid");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_chats_senderid");

                    b.ToTable("chats");
                });

            modelBuilder.Entity("BIMS.Models.ChatStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_chatstatuses");

                    b.ToTable("chatstatuses");
                });

            modelBuilder.Entity("BIMS.Models.ChatVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer")
                        .HasColumnName("chatid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("OldMessage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("oldmessage");

                    b.HasKey("Id")
                        .HasName("pk_chatversions");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_chatversions_chatid");

                    b.ToTable("chatversions");
                });

            modelBuilder.Entity("BIMS.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("BIMS.Models.Documente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_documentes");

                    b.ToTable("documentes");
                });

            modelBuilder.Entity("BIMS.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer")
                        .HasColumnName("buildingid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("NumberOfRoom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("numberofroom");

                    b.HasKey("Id")
                        .HasName("pk_floors");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_floors_buildingid");

                    b.ToTable("floors");
                });

            modelBuilder.Entity("BIMS.Models.FloorPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AppliedDate")
                        .HasColumnType("date")
                        .HasColumnName("applieddate");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer")
                        .HasColumnName("floorid");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_floorprices");

                    b.HasIndex("FloorId")
                        .HasDatabaseName("ix_floorprices_floorid");

                    b.ToTable("floorprices");
                });

            modelBuilder.Entity("BIMS.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genders");

                    b.ToTable("genders");
                });

            modelBuilder.Entity("BIMS.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("duedate");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoicedate");

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("invoicestatusid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_invoices");

                    b.HasIndex("InvoiceStatusId")
                        .HasDatabaseName("ix_invoices_invoicestatusid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_invoices_userid");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("BIMS.Models.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_invoicestatuses");

                    b.ToTable("invoicestatuses");
                });

            modelBuilder.Entity("BIMS.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discountprice");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("imagepath");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("isavailable");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("itemcategoryid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<int>("SalesCount")
                        .HasColumnType("integer")
                        .HasColumnName("salescount");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer")
                        .HasColumnName("shopid");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("ItemCategoryId")
                        .HasDatabaseName("ix_items_itemcategoryid");

                    b.HasIndex(new[] { "ShopId" }, "IX_Items_ShopId")
                        .HasDatabaseName("ix_items_shopid");

                    b.ToTable("items");
                });

            modelBuilder.Entity("BIMS.Models.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_itemcategories");

                    b.ToTable("itemcategories");
                });

            modelBuilder.Entity("BIMS.Models.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("itemid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_itemimages");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_itemimages_itemid");

                    b.ToTable("itemimages");
                });

            modelBuilder.Entity("BIMS.Models.ItemPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AppliedDate")
                        .HasColumnType("date")
                        .HasColumnName("applieddate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("itemid");

                    b.Property<double>("MaxPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("maxprice");

                    b.Property<double>("MinPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("minprice");

                    b.HasKey("Id")
                        .HasName("pk_itemprices");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_itemprices_itemid");

                    b.ToTable("itemprices");
                });

            modelBuilder.Entity("BIMS.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("cityid");

                    b.Property<string>("Coordinates")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("coordinates");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_locations_cityid");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("buildingemployeeid");

                    b.Property<DateOnly>("DateSubmitted")
                        .HasColumnType("date")
                        .HasColumnName("datesubmitted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("MaintenanceStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenancestatusid");

                    b.Property<int>("MaintenanceTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenancetypeid");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("roomid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_maintenancerequests");

                    b.HasIndex("BuildingEmployeeId")
                        .HasDatabaseName("ix_maintenancerequests_buildingemployeeid");

                    b.HasIndex("MaintenanceStatusId")
                        .HasDatabaseName("ix_maintenancerequests_maintenancestatusid");

                    b.HasIndex("MaintenanceTypeId")
                        .HasDatabaseName("ix_maintenancerequests_maintenancetypeid");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_maintenancerequests_roomid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_maintenancerequests_userid");

                    b.ToTable("maintenancerequests");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_maintenancestatuses");

                    b.ToTable("maintenancestatuses");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_maintenancetypes");

                    b.ToTable("maintenancetypes");
                });

            modelBuilder.Entity("BIMS.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isread");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("notificationdate");

                    b.Property<int>("NotificationStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("notificationstatusid");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("notificationtypeid");

                    b.Property<bool>("TempColumn")
                        .HasColumnType("boolean")
                        .HasColumnName("tempcolumn");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("NotificationStatusId")
                        .HasDatabaseName("ix_notifications_notificationstatusid");

                    b.HasIndex("NotificationTypeId")
                        .HasDatabaseName("ix_notifications_notificationtypeid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notifications_userid");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("BIMS.Models.NotificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_notificationstatuses");

                    b.ToTable("notificationstatuses");
                });

            modelBuilder.Entity("BIMS.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_notificationtypes");

                    b.ToTable("notificationtypes");
                });

            modelBuilder.Entity("BIMS.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("orderdate");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text")
                        .HasColumnName("paymentstatus");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text")
                        .HasColumnName("shippingaddress");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("totalamount");

                    b.Property<string>("TransactionRef")
                        .HasColumnType("text")
                        .HasColumnName("transactionref");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_userid");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("BIMS.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("itemid");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("orderid");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_orderitems");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_orderitems_itemid");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_orderitems_orderid");

                    b.ToTable("orderitems");
                });

            modelBuilder.Entity("BIMS.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bankaccountnumber");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bankname");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("documentid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("License")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("license");

                    b.Property<int>("OwnershipTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("ownershiptypeid");

                    b.Property<DateOnly>("RegisteredDate")
                        .HasColumnType("date")
                        .HasColumnName("registereddate");

                    b.Property<int>("Tin")
                        .HasColumnType("integer")
                        .HasColumnName("tin");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean")
                        .HasColumnName("verified");

                    b.HasKey("Id")
                        .HasName("pk_owners");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_owners_documentid");

                    b.HasIndex("OwnershipTypeId")
                        .HasDatabaseName("ix_owners_ownershiptypeid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_owners_userid");

                    b.ToTable("owners");
                });

            modelBuilder.Entity("BIMS.Models.OwnershipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_ownershiptypes");

                    b.ToTable("ownershiptypes");
                });

            modelBuilder.Entity("BIMS.Models.PaymentMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_paymentmodes");

                    b.ToTable("paymentmodes");
                });

            modelBuilder.Entity("BIMS.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_paymenttypes");

                    b.ToTable("paymenttypes");
                });

            modelBuilder.Entity("BIMS.Models.RentalAgreementTermination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("documentid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reason");

                    b.Property<int>("RoomRentalId")
                        .HasColumnType("integer")
                        .HasColumnName("roomrentalid");

                    b.HasKey("Id")
                        .HasName("pk_rentalagreementterminations");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_rentalagreementterminations_documentid");

                    b.HasIndex("RoomRentalId")
                        .HasDatabaseName("ix_rentalagreementterminations_roomrentalid");

                    b.ToTable("rentalagreementterminations");
                });

            modelBuilder.Entity("BIMS.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer")
                        .HasColumnName("floorid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<double>("Length")
                        .HasColumnType("double precision")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("RoomStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("roomstatusid");

                    b.Property<int>("SizeInm2")
                        .HasColumnType("integer")
                        .HasColumnName("sizeinm2");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<double>("Width")
                        .HasColumnType("double precision")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_rooms");

                    b.HasIndex("FloorId")
                        .HasDatabaseName("ix_rooms_floorid");

                    b.HasIndex("RoomStatusId")
                        .HasDatabaseName("ix_rooms_roomstatusid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_rooms_userid");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("BIMS.Models.RoomPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AppliedDate")
                        .HasColumnType("date")
                        .HasColumnName("applieddate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<double>("PricePerM2")
                        .HasColumnType("double precision")
                        .HasColumnName("priceperm2");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("roomid");

                    b.HasKey("Id")
                        .HasName("pk_roomprices");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_roomprices_roomid");

                    b.ToTable("roomprices");
                });

            modelBuilder.Entity("BIMS.Models.RoomProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("roomid");

                    b.Property<int>("RoomPropertyTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("roompropertytypeid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_roomproperties");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_roomproperties_roomid");

                    b.HasIndex("RoomPropertyTypeId")
                        .HasDatabaseName("ix_roomproperties_roompropertytypeid");

                    b.ToTable("roomproperties");
                });

            modelBuilder.Entity("BIMS.Models.RoomPropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roompropertytypes");

                    b.ToTable("roompropertytypes");
                });

            modelBuilder.Entity("BIMS.Models.RoomPropertyTypeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("RoomPropertyTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("roompropertytypeid");

                    b.HasKey("Id")
                        .HasName("pk_roompropertytypeoptions");

                    b.HasIndex("RoomPropertyTypeId")
                        .HasDatabaseName("ix_roompropertytypeoptions_roompropertytypeid");

                    b.ToTable("roompropertytypeoptions");
                });

            modelBuilder.Entity("BIMS.Models.RoomRental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("businessareaid");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("documentid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("roomid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenantid");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("totalprice");

                    b.HasKey("Id")
                        .HasName("pk_roomrentals");

                    b.HasIndex("BusinessAreaId")
                        .HasDatabaseName("ix_roomrentals_businessareaid");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_roomrentals_documentid");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_roomrentals_roomid");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_roomrentals_tenantid");

                    b.ToTable("roomrentals");
                });

            modelBuilder.Entity("BIMS.Models.RoomRentalPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("invoicenumber");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateOnly>("PaidDate")
                        .HasColumnType("date")
                        .HasColumnName("paiddate");

                    b.Property<int>("PaymentModeId")
                        .HasColumnType("integer")
                        .HasColumnName("paymentmodeid");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("paymenttypeid");

                    b.Property<int>("RoomRentalId")
                        .HasColumnType("integer")
                        .HasColumnName("roomrentalid");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("totalamount");

                    b.HasKey("Id")
                        .HasName("pk_roomrentalpayments");

                    b.HasIndex("PaymentModeId")
                        .HasDatabaseName("ix_roomrentalpayments_paymentmodeid");

                    b.HasIndex("PaymentTypeId")
                        .HasDatabaseName("ix_roomrentalpayments_paymenttypeid");

                    b.HasIndex("RoomRentalId")
                        .HasDatabaseName("ix_roomrentalpayments_roomrentalid");

                    b.ToTable("roomrentalpayments");
                });

            modelBuilder.Entity("BIMS.Models.RoomStatue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roomstatues");

                    b.ToTable("roomstatues");
                });

            modelBuilder.Entity("BIMS.Models.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_servicecategories");

                    b.ToTable("servicecategories");
                });

            modelBuilder.Entity("BIMS.Models.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("businessareaid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imageurl");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_shops");

                    b.HasIndex("BusinessAreaId")
                        .HasDatabaseName("ix_shops_businessareaid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_shops_userid");

                    b.ToTable("shops");
                });

            modelBuilder.Entity("BIMS.Models.ShopLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("createddate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("roomid");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer")
                        .HasColumnName("shopid");

                    b.HasKey("Id")
                        .HasName("pk_shoplocations");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_shoplocations_roomid");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_shoplocations_shopid");

                    b.ToTable("shoplocations");
                });

            modelBuilder.Entity("BIMS.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contact");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("TenantTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("tenanttypeid");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.HasIndex("TenantTypeId")
                        .HasDatabaseName("ix_tenants_tenanttypeid");

                    b.ToTable("tenants");
                });

            modelBuilder.Entity("BIMS.Models.TenantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tenanttypes");

                    b.ToTable("tenanttypes");
                });

            modelBuilder.Entity("BIMS.Models.UseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_usetypes");

                    b.ToTable("usetypes");
                });

            modelBuilder.Entity("BIMS.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessfailedcount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("createddate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailconfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("firstname");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer")
                        .HasColumnName("genderid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("lastname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutend");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("middlename");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedusername");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("ownerid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("GenderId")
                        .HasDatabaseName("ix_user_genderid");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedname");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_roleclaims");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userclaims");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("providerdisplayname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("IdentityUserLogin<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserToken<string>");
                });

            modelBuilder.Entity("BIMS.Models.Building", b =>
                {
                    b.HasOne("BIMS.Models.BuildingType", "BuildingType")
                        .WithMany("Buildings")
                        .HasForeignKey("BuildingTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_BuildingTypes");

                    b.HasOne("BIMS.Models.City", "City")
                        .WithMany("Buildings")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_Cities");

                    b.HasOne("BIMS.Models.Location", "Location")
                        .WithMany("Buildings")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_Locations");

                    b.HasOne("BIMS.Models.Owner", "Owner")
                        .WithMany("Buildings")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_Owners");

                    b.HasOne("BIMS.Models.OwnershipType", "OwnershipType")
                        .WithMany("Buildings")
                        .HasForeignKey("OwnershipTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_OwnershipTypes");

                    b.HasOne("BIMS.Models.UseType", "UseType")
                        .WithMany("Buildings")
                        .HasForeignKey("UseTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_UseTypes");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("Buildings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Buildings_Users");

                    b.Navigation("BuildingType");

                    b.Navigation("City");

                    b.Navigation("Location");

                    b.Navigation("Owner");

                    b.Navigation("OwnershipType");

                    b.Navigation("UseType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.BuildingEmployee", b =>
                {
                    b.HasOne("BIMS.Models.Building", "Building")
                        .WithMany("BuildingEmployees")
                        .HasForeignKey("BuildingId")
                        .IsRequired()
                        .HasConstraintName("FK_BuildingEmployees_Buildings");

                    b.HasOne("BIMS.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("BuildingEmployees")
                        .HasForeignKey("ServiceCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_BuildingEmployees_ServiceCategories");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("BuildingEmployees")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_BuildingEmployees_Users");

                    b.Navigation("Building");

                    b.Navigation("ServiceCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.Cart", b =>
                {
                    b.HasOne("BIMS.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_carts_items_itemid");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_carts_user_userid");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.Chat", b =>
                {
                    b.HasOne("BIMS.Models.ChatStatus", "ChatStatus")
                        .WithMany("Chats")
                        .HasForeignKey("ChatStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Chats_ChatStatuses");

                    b.HasOne("BIMS.Models.Chat", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Chats_Chats");

                    b.HasOne("BIMS.Models.User", "Receiver")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK_Chats_Users1");

                    b.HasOne("BIMS.Models.User", "Sender")
                        .WithMany("ChatSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Chats_Users");

                    b.Navigation("ChatStatus");

                    b.Navigation("Parent");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BIMS.Models.ChatVersion", b =>
                {
                    b.HasOne("BIMS.Models.Chat", "Chat")
                        .WithMany("ChatVersions")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("FK_ChatVersions_Chats");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("BIMS.Models.Floor", b =>
                {
                    b.HasOne("BIMS.Models.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .IsRequired()
                        .HasConstraintName("FK_Floors_Buildings");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("BIMS.Models.FloorPrice", b =>
                {
                    b.HasOne("BIMS.Models.Floor", "Floor")
                        .WithMany("FloorPrices")
                        .HasForeignKey("FloorId")
                        .IsRequired()
                        .HasConstraintName("FK_FloorPrices_Floors");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("BIMS.Models.Invoice", b =>
                {
                    b.HasOne("BIMS.Models.InvoiceStatus", "InvoiceStatus")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_InvoiceStatuses");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_Users");

                    b.Navigation("InvoiceStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.Item", b =>
                {
                    b.HasOne("BIMS.Models.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Items_ItemCategories");

                    b.HasOne("BIMS.Models.Shop", null)
                        .WithMany("Items")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_shops_shopid");

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("BIMS.Models.ItemImage", b =>
                {
                    b.HasOne("BIMS.Models.Item", "Item")
                        .WithMany("ItemImages")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ItemImages_Items");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("BIMS.Models.ItemPrice", b =>
                {
                    b.HasOne("BIMS.Models.Item", "Item")
                        .WithMany("ItemPrices")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ItemPrices_Items");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("BIMS.Models.Location", b =>
                {
                    b.HasOne("BIMS.Models.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Locations_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceRequest", b =>
                {
                    b.HasOne("BIMS.Models.BuildingEmployee", "BuildingEmployee")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("BuildingEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceRequests_BuildingEmployees");

                    b.HasOne("BIMS.Models.MaintenanceStatus", "MaintenanceStatus")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("MaintenanceStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceRequests_MaintenanceStatuses");

                    b.HasOne("BIMS.Models.MaintenanceType", "MaintenanceType")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("MaintenanceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceRequests_MaintenanceTypes");

                    b.HasOne("BIMS.Models.Room", "Room")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceRequests_Rooms");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceRequests_Users");

                    b.Navigation("BuildingEmployee");

                    b.Navigation("MaintenanceStatus");

                    b.Navigation("MaintenanceType");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.Notification", b =>
                {
                    b.HasOne("BIMS.Models.NotificationStatus", "NotificationStatus")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_NotificationStatuses");

                    b.HasOne("BIMS.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_NotificationTypes");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_AspNetUsers");

                    b.Navigation("NotificationStatus");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.Order", b =>
                {
                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_user_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.OrderItem", b =>
                {
                    b.HasOne("BIMS.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orderitems_items_itemid");

                    b.HasOne("BIMS.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orderitems_orders_orderid");

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BIMS.Models.Owner", b =>
                {
                    b.HasOne("BIMS.Models.Documente", "Document")
                        .WithMany("Owners")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_Owners_Documentes");

                    b.HasOne("BIMS.Models.OwnershipType", "OwnershipType")
                        .WithMany("Owners")
                        .HasForeignKey("OwnershipTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Owners_OwnershipTypes");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owners_user_userid");

                    b.Navigation("Document");

                    b.Navigation("OwnershipType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.RentalAgreementTermination", b =>
                {
                    b.HasOne("BIMS.Models.Documente", "Document")
                        .WithMany("RentalAgreementTerminations")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_RentalAgreementTerminations_Documentes");

                    b.HasOne("BIMS.Models.RoomRental", "RoomRental")
                        .WithMany("RentalAgreementTerminations")
                        .HasForeignKey("RoomRentalId")
                        .IsRequired()
                        .HasConstraintName("FK_RentalAgreementTerminations_RoomRentals");

                    b.Navigation("Document");

                    b.Navigation("RoomRental");
                });

            modelBuilder.Entity("BIMS.Models.Room", b =>
                {
                    b.HasOne("BIMS.Models.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_Floors");

                    b.HasOne("BIMS.Models.RoomStatue", "RoomStatus")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_RoomStatues");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("Rooms")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_Users");

                    b.Navigation("Floor");

                    b.Navigation("RoomStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.RoomPrice", b =>
                {
                    b.HasOne("BIMS.Models.Room", "Room")
                        .WithMany("RoomPrices")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomPrices_Rooms");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BIMS.Models.RoomProperty", b =>
                {
                    b.HasOne("BIMS.Models.Room", "Room")
                        .WithMany("RoomProperties")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomProperties_Rooms");

                    b.HasOne("BIMS.Models.RoomPropertyType", "RoomPropertyType")
                        .WithMany("RoomProperties")
                        .HasForeignKey("RoomPropertyTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomProperties_RoomPropertyTypes");

                    b.Navigation("Room");

                    b.Navigation("RoomPropertyType");
                });

            modelBuilder.Entity("BIMS.Models.RoomPropertyTypeOption", b =>
                {
                    b.HasOne("BIMS.Models.RoomPropertyType", "RoomPropertyType")
                        .WithMany("RoomPropertyTypeOptions")
                        .HasForeignKey("RoomPropertyTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomPropertyTypeOptions_RoomPropertyTypes");

                    b.Navigation("RoomPropertyType");
                });

            modelBuilder.Entity("BIMS.Models.RoomRental", b =>
                {
                    b.HasOne("BIMS.Models.BusinessArea", "BusinessArea")
                        .WithMany("RoomRentals")
                        .HasForeignKey("BusinessAreaId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentals_BusinessAreas");

                    b.HasOne("BIMS.Models.Documente", "Document")
                        .WithMany("RoomRentals")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_RoomRentals_Documentes");

                    b.HasOne("BIMS.Models.Room", "Room")
                        .WithMany("RoomRentals")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentals_Rooms");

                    b.HasOne("BIMS.Models.Tenant", "Tenant")
                        .WithMany("RoomRentals")
                        .HasForeignKey("TenantId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentals_Tenants");

                    b.Navigation("BusinessArea");

                    b.Navigation("Document");

                    b.Navigation("Room");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BIMS.Models.RoomRentalPayment", b =>
                {
                    b.HasOne("BIMS.Models.PaymentMode", "PaymentMode")
                        .WithMany("RoomRentalPayments")
                        .HasForeignKey("PaymentModeId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentalPayments_PaymentModes");

                    b.HasOne("BIMS.Models.PaymentType", "PaymentType")
                        .WithMany("RoomRentalPayments")
                        .HasForeignKey("PaymentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentalPayments_PaymentTypes");

                    b.HasOne("BIMS.Models.RoomRental", "RoomRental")
                        .WithMany("RoomRentalPayments")
                        .HasForeignKey("RoomRentalId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomRentalPayments_RoomRentals");

                    b.Navigation("PaymentMode");

                    b.Navigation("PaymentType");

                    b.Navigation("RoomRental");
                });

            modelBuilder.Entity("BIMS.Models.Shop", b =>
                {
                    b.HasOne("BIMS.Models.BusinessArea", "BusinessArea")
                        .WithMany("Shops")
                        .HasForeignKey("BusinessAreaId")
                        .IsRequired()
                        .HasConstraintName("FK_Shops_BusinessAreas");

                    b.HasOne("BIMS.Models.User", "User")
                        .WithMany("Shops")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Shops_Users");

                    b.Navigation("BusinessArea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BIMS.Models.ShopLocation", b =>
                {
                    b.HasOne("BIMS.Models.Room", "Room")
                        .WithMany("ShopLocations")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_ShopLocations_Rooms");

                    b.HasOne("BIMS.Models.Shop", "Shop")
                        .WithMany("ShopLocations")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("FK_ShopLocations_Shops");

                    b.Navigation("Room");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BIMS.Models.Tenant", b =>
                {
                    b.HasOne("BIMS.Models.TenantType", "TenantType")
                        .WithMany("Tenants")
                        .HasForeignKey("TenantTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Tenants_TenantTypes");

                    b.Navigation("TenantType");
                });

            modelBuilder.Entity("BIMS.Models.User", b =>
                {
                    b.HasOne("BIMS.Models.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Genders");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BIMS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BIMS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BIMS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BIMS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BIMS.Models.Building", b =>
                {
                    b.Navigation("BuildingEmployees");

                    b.Navigation("Floors");
                });

            modelBuilder.Entity("BIMS.Models.BuildingEmployee", b =>
                {
                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("BIMS.Models.BuildingType", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("BIMS.Models.BusinessArea", b =>
                {
                    b.Navigation("RoomRentals");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("BIMS.Models.Chat", b =>
                {
                    b.Navigation("ChatVersions");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("BIMS.Models.ChatStatus", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("BIMS.Models.City", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("BIMS.Models.Documente", b =>
                {
                    b.Navigation("Owners");

                    b.Navigation("RentalAgreementTerminations");

                    b.Navigation("RoomRentals");
                });

            modelBuilder.Entity("BIMS.Models.Floor", b =>
                {
                    b.Navigation("FloorPrices");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BIMS.Models.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BIMS.Models.InvoiceStatus", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("BIMS.Models.Item", b =>
                {
                    b.Navigation("ItemImages");

                    b.Navigation("ItemPrices");
                });

            modelBuilder.Entity("BIMS.Models.ItemCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BIMS.Models.Location", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceStatus", b =>
                {
                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("BIMS.Models.MaintenanceType", b =>
                {
                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("BIMS.Models.NotificationStatus", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("BIMS.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("BIMS.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BIMS.Models.Owner", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("BIMS.Models.OwnershipType", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Owners");
                });

            modelBuilder.Entity("BIMS.Models.PaymentMode", b =>
                {
                    b.Navigation("RoomRentalPayments");
                });

            modelBuilder.Entity("BIMS.Models.PaymentType", b =>
                {
                    b.Navigation("RoomRentalPayments");
                });

            modelBuilder.Entity("BIMS.Models.Room", b =>
                {
                    b.Navigation("MaintenanceRequests");

                    b.Navigation("RoomPrices");

                    b.Navigation("RoomProperties");

                    b.Navigation("RoomRentals");

                    b.Navigation("ShopLocations");
                });

            modelBuilder.Entity("BIMS.Models.RoomPropertyType", b =>
                {
                    b.Navigation("RoomProperties");

                    b.Navigation("RoomPropertyTypeOptions");
                });

            modelBuilder.Entity("BIMS.Models.RoomRental", b =>
                {
                    b.Navigation("RentalAgreementTerminations");

                    b.Navigation("RoomRentalPayments");
                });

            modelBuilder.Entity("BIMS.Models.RoomStatue", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BIMS.Models.ServiceCategory", b =>
                {
                    b.Navigation("BuildingEmployees");
                });

            modelBuilder.Entity("BIMS.Models.Shop", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("ShopLocations");
                });

            modelBuilder.Entity("BIMS.Models.Tenant", b =>
                {
                    b.Navigation("RoomRentals");
                });

            modelBuilder.Entity("BIMS.Models.TenantType", b =>
                {
                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("BIMS.Models.UseType", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("BIMS.Models.User", b =>
                {
                    b.Navigation("BuildingEmployees");

                    b.Navigation("Buildings");

                    b.Navigation("ChatReceivers");

                    b.Navigation("ChatSenders");

                    b.Navigation("Invoices");

                    b.Navigation("MaintenanceRequests");

                    b.Navigation("Notifications");

                    b.Navigation("Rooms");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
